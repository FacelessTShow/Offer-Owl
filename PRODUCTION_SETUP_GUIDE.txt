PRICETRACKER PRO - PRODUCTION SETUP GUIDE
==========================================

This guide contains all the steps you need to configure APIs, keys, and deploy your price comparison app to production.

üìã TABLE OF CONTENTS
====================
1. Environment Variables & API Keys
2. Push Notifications Setup
3. Firebase Configuration  
4. Apple App Store Setup
5. Google Play Store Setup
6. Backend API Configuration
7. Third-Party Services Setup
8. Security & Authentication
9. Database Setup
10. Analytics & Monitoring
11. Testing & Quality Assurance
12. Deployment Checklist
13. Post-Launch Monitoring

üîë 1. ENVIRONMENT VARIABLES & API KEYS
======================================

Create a .env file in your project root with the following variables:

# Expo Configuration
EXPO_PUBLIC_PROJECT_ID=your-expo-project-id
EXPO_PUBLIC_ENVIRONMENT=production

# API Configuration
EXPO_PUBLIC_API_BASE_URL=https://your-api-domain.com/api
EXPO_PUBLIC_WS_URL=wss://your-api-domain.com/ws

# Firebase Configuration
EXPO_PUBLIC_FIREBASE_API_KEY=your-firebase-api-key
EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN=your-project.firebaseapp.com
EXPO_PUBLIC_FIREBASE_PROJECT_ID=your-firebase-project-id
EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET=your-project.appspot.com
EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=123456789
EXPO_PUBLIC_FIREBASE_APP_ID=1:123456789:web:abcdef123456

# Push Notifications
EXPO_PUSH_TOKEN=your-expo-push-token

# Social Authentication
EXPO_PUBLIC_GOOGLE_CLIENT_ID=your-google-client-id
EXPO_PUBLIC_APPLE_CLIENT_ID=your-apple-client-id

# Third-Party APIs
AMAZON_ACCESS_KEY=your-amazon-access-key
AMAZON_SECRET_KEY=your-amazon-secret-key
AMAZON_ASSOCIATE_TAG=your-associate-tag

WALMART_API_KEY=your-walmart-api-key
EBAY_CLIENT_ID=your-ebay-client-id
EBAY_CLIENT_SECRET=your-ebay-client-secret

# Brazilian Retailers
MERCADO_LIVRE_CLIENT_ID=your-ml-client-id
MERCADO_LIVRE_CLIENT_SECRET=your-ml-client-secret
MAGAZINE_LUIZA_API_KEY=your-magazine-luiza-key
KABUM_API_KEY=your-kabum-api-key

# Analytics
GOOGLE_ANALYTICS_ID=your-ga-tracking-id
MIXPANEL_TOKEN=your-mixpanel-token

# Error Tracking
SENTRY_DSN=your-sentry-dsn

üì± 2. PUSH NOTIFICATIONS SETUP
===============================

A. Apple Push Notification Service (APNs)
------------------------------------------
1. Go to Apple Developer Console (developer.apple.com)
2. Navigate to "Certificates, Identifiers & Profiles"
3. Create a new APNs Auth Key:
   - Click "Keys" ‚Üí "+"
   - Select "Apple Push Notifications service (APNs)"
   - Download the .p8 file
   - Note the Key ID and Team ID

4. Configure in your backend:
   APNS_KEY_ID=your-key-id-here
   APNS_TEAM_ID=your-team-id-here
   APNS_PRIVATE_KEY=path/to/your/AuthKey_KEYID.p8
   APNS_ENVIRONMENT=production

B. Firebase Cloud Messaging (FCM)
----------------------------------
1. Go to Firebase Console (console.firebase.google.com)
2. Create/Select your project
3. Navigate to Project Settings ‚Üí Cloud Messaging
4. Generate a new private key for service account
5. Download the JSON file
6. Configure in your backend:
   FIREBASE_SERVICE_ACCOUNT_PATH=path/to/service-account.json

C. Expo Push Notifications
---------------------------
1. Run: expo build:ios or expo build:android
2. Your push notification credentials will be automatically configured
3. For EAS Build: expo credentials:manager

üî• 3. FIREBASE CONFIGURATION
=============================

A. Create Firebase Project
---------------------------
1. Go to console.firebase.google.com
2. Click "Add project"
3. Enter project name: "pricetracker-pro"
4. Enable Google Analytics (recommended)
5. Choose analytics account

B. Enable Authentication
------------------------
1. Go to Authentication ‚Üí Sign-in method
2. Enable the following providers:
   - Email/Password
   - Google
   - Apple (iOS only)
3. Configure authorized domains

C. Setup Firestore Database
----------------------------
1. Go to Firestore Database
2. Create database in production mode
3. Set up security rules:

```javascript
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Public product data
    match /products/{document=**} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // Bug reports
    match /bug_reports/{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}
```

D. Setup Cloud Storage
-----------------------
1. Go to Storage
2. Set up security rules for user uploads
3. Create buckets for:
   - Profile images: /users/{userId}/profile/
   - Bug report attachments: /bug_reports/{reportId}/
   - Product images: /products/images/

üçé 4. APPLE APP STORE SETUP
============================

A. Apple Developer Account
---------------------------
1. Enroll in Apple Developer Program ($99/year)
2. Create App ID in Developer Console
3. Bundle Identifier: com.yourcompany.pricetrackerpro

B. App Store Connect
--------------------
1. Create new app in App Store Connect
2. Fill out app information:
   - Name: "PriceTracker Pro"
   - Category: Shopping
   - Content Rating: 4+
   - Privacy Policy URL: https://yoursite.com/privacy
   - Support URL: https://yoursite.com/support

C. App Store Metadata
----------------------
Screenshots (Required sizes):
- iPhone 6.7": 1290x2796 (3 screenshots minimum)
- iPhone 6.5": 1242x2688
- iPhone 5.5": 1242x2208  
- iPad Pro (6th gen): 2048x2732
- iPad Pro (12.9" 2nd gen): 2048x2732

App Description:
"Compare prices from top retailers instantly! PriceTracker Pro helps you find the best deals across Amazon, Walmart, eBay and more. Get price alerts, share deals with friends, and save money on every purchase."

Keywords: 
"price comparison, shopping, deals, discounts, save money, price alerts, walmart, amazon, ebay, shopping app"

D. In-App Purchases (if needed)
-------------------------------
1. Create in-app purchase products
2. Set up StoreKit configuration
3. Test with sandbox users

ü§ñ 5. GOOGLE PLAY STORE SETUP
==============================

A. Google Play Console
-----------------------
1. Create Developer Account ($25 one-time fee)
2. Create new application
3. Package name: com.yourcompany.pricetrackerpro

B. App Bundle & APK
-------------------
1. Generate signed APK/AAB:
   expo build:android --type=app-bundle
2. Upload to Play Console
3. Configure release tracks (Internal ‚Üí Alpha ‚Üí Beta ‚Üí Production)

C. Store Listing
----------------
Short Description (80 chars):
"Compare prices instantly across top retailers. Find deals, save money!"

Full Description:
"üõçÔ∏è PriceTracker Pro - Your Ultimate Shopping Companion

Compare prices from hundreds of retailers including Amazon, Walmart, eBay, and more! Never overpay again with real-time price tracking and instant deal alerts.

‚ú® KEY FEATURES:
‚Ä¢ Compare prices across 20+ major retailers
‚Ä¢ Real-time price drop alerts
‚Ä¢ Barcode & image search
‚Ä¢ Share deals with friends
‚Ä¢ Gamification & rewards
‚Ä¢ Voice search capability
‚Ä¢ Price history tracking
‚Ä¢ Wishlist & favorites

üèÜ SAVE MORE, SHOP SMARTER:
‚Ä¢ Get notified when prices drop
‚Ä¢ Track price history for better buying decisions
‚Ä¢ Earn points and unlock achievements
‚Ä¢ Share great deals with your network

üì± SMART SEARCH:
‚Ä¢ Scan barcodes instantly
‚Ä¢ Take photos to find products
‚Ä¢ Voice search for hands-free shopping
‚Ä¢ Multi-language support (English/Portuguese)

Start saving money today! Download PriceTracker Pro and join thousands of smart shoppers."

Graphics:
- High-res icon: 512x512
- Feature graphic: 1024x500
- Screenshots: 1080x1920 (phone), 1200x1920 (7" tablet), 1600x2560 (10" tablet)

üîß 6. BACKEND API CONFIGURATION
================================

A. Server Setup
---------------
Choose hosting provider:
- AWS EC2/ECS
- Google Cloud Platform
- Heroku
- DigitalOcean
- Vercel (for serverless)

B. Database Configuration
-------------------------
MongoDB Atlas Setup:
1. Create cluster at mongodb.com/cloud/atlas
2. Configure network access (whitelist IPs)
3. Create database user
4. Get connection string:
   MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/pricetracker

Redis Setup (for caching):
1. Redis Cloud or AWS ElastiCache
2. Configure connection:
   REDIS_URL=redis://username:password@host:port

C. API Endpoints Structure
--------------------------
Base URL: https://api.pricetrackerpro.com

Authentication:
POST /api/auth/login
POST /api/auth/signup
POST /api/auth/logout
POST /api/auth/refresh
GET  /api/auth/me

Products:
GET  /api/products/search
GET  /api/products/:id
POST /api/products/track
GET  /api/products/tracked

Price Alerts:
GET  /api/alerts
POST /api/alerts
PUT  /api/alerts/:id
DELETE /api/alerts/:id

Bug Reports:
POST /api/bug-reports
GET  /api/bug-reports
PUT  /api/bug-reports/:id

Gamification:
GET  /api/gamification/profile
POST /api/gamification/actions
GET  /api/gamification/leaderboard

Push Notifications:
POST /api/push-notifications/send
POST /api/push-notifications/register
POST /api/push-notifications/remove-token

üîó 7. THIRD-PARTY SERVICES SETUP
=================================

A. Amazon Product Advertising API
----------------------------------
1. Apply for Product Advertising API access
2. Create associate account
3. Get access keys:
   - Access Key ID
   - Secret Access Key
   - Associate Tag

Documentation: https://webservices.amazon.com/paapi5/documentation/

B. Walmart API
---------------
1. Register at developer.walmart.com
2. Create application
3. Get API key
4. Rate limits: 5 calls/second

C. eBay API
-----------
1. Register at developer.ebay.com
2. Create application
3. Get Client ID and Secret
4. Implement OAuth 2.0

D. Brazilian Retailers
----------------------
MercadoLibre API:
1. Register at developers.mercadolibre.com
2. Create application
3. Implement OAuth flow

Magazine Luiza:
- Contact: desenvolvedores@magazineluiza.com.br
- API documentation: Request access

KaBuM:
- Contact their developer team
- B2B API access required

E. Price Tracking Services
---------------------------
PriceAPI:
- Sign up at priceapi.com
- Get API key
- Plans start at $49/month

Keepa API:
- Register at keepa.com/#!api
- Amazon price history
- ‚Ç¨39/month for 1M requests

üîê 8. SECURITY & AUTHENTICATION
================================

A. JWT Configuration
--------------------
```javascript
JWT_SECRET=your-super-secure-secret-key-here
JWT_EXPIRES_IN=24h
JWT_REFRESH_EXPIRES_IN=7d
```

B. OAuth Setup
---------------
Google OAuth:
1. Go to console.developers.google.com
2. Create project and enable Google+ API
3. Create OAuth 2.0 credentials
4. Add authorized redirect URIs

Apple Sign-In:
1. Enable in Apple Developer portal
2. Configure in Xcode project
3. Add Sign in with Apple capability

C. Security Headers
-------------------
Configure in your backend:
- CORS policies
- Rate limiting
- Request validation
- SQL injection prevention
- XSS protection

D. Data Encryption
------------------
- Encrypt sensitive user data
- Use HTTPS everywhere
- Implement proper password hashing (bcrypt)
- Secure API key storage

üóÑÔ∏è 9. DATABASE SETUP
=====================

A. MongoDB Collections
-----------------------
Users Collection:
```javascript
{
  _id: ObjectId,
  email: String,
  name: String,
  avatar: String,
  preferences: {
    currency: String,
    language: String,
    notifications: Object
  },
  gamification: {
    points: Number,
    level: Number,
    achievements: Array
  },
  createdAt: Date,
  updatedAt: Date
}
```

Products Collection:
```javascript
{
  _id: ObjectId,
  name: String,
  brand: String,
  category: String,
  description: String,
  images: Array,
  prices: [{
    retailer: String,
    price: Number,
    currency: String,
    url: String,
    lastUpdated: Date
  }],
  priceHistory: Array,
  createdAt: Date
}
```

Price Alerts Collection:
```javascript
{
  _id: ObjectId,
  userId: ObjectId,
  productId: ObjectId,
  targetPrice: Number,
  isActive: Boolean,
  createdAt: Date
}
```

B. Database Indexes
-------------------
Create indexes for performance:
```javascript
// Users
db.users.createIndex({ email: 1 }, { unique: true })

// Products
db.products.createIndex({ name: "text", brand: "text" })
db.products.createIndex({ category: 1 })
db.products.createIndex({ "prices.retailer": 1 })

// Price Alerts
db.priceAlerts.createIndex({ userId: 1 })
db.priceAlerts.createIndex({ productId: 1 })
```

üìä 10. ANALYTICS & MONITORING
==============================

A. Google Analytics 4
----------------------
1. Create GA4 property
2. Install gtag library
3. Track key events:
   - Product searches
   - Price comparisons
   - Deal shares
   - User signups
   - Purchase completions

B. Mixpanel Setup
-----------------
1. Create project at mixpanel.com
2. Get project token
3. Track custom events:
   - App launches
   - Feature usage
   - User journey
   - Gamification actions

C. Error Monitoring (Sentry)
-----------------------------
1. Create project at sentry.io
2. Install Sentry SDK
3. Configure error tracking:
```javascript
import * as Sentry from "@sentry/react-native";

Sentry.init({
  dsn: "YOUR_SENTRY_DSN",
});
```

D. Performance Monitoring
--------------------------
- App performance metrics
- API response times
- Crash reporting
- User experience monitoring

üß™ 11. TESTING & QUALITY ASSURANCE
===================================

A. Testing Checklist
---------------------
‚ñ° Unit tests for core functions
‚ñ° Integration tests for APIs
‚ñ° E2E tests for critical user flows
‚ñ° Performance testing
‚ñ° Security testing
‚ñ° Accessibility testing

B. Device Testing
-----------------
iOS Devices:
‚ñ° iPhone 15 Pro Max
‚ñ° iPhone 15
‚ñ° iPhone 14
‚ñ° iPhone SE (3rd generation)
‚ñ° iPad Pro
‚ñ° iPad Air

Android Devices:
‚ñ° Samsung Galaxy S24
‚ñ° Google Pixel 8
‚ñ° OnePlus 12
‚ñ° Xiaomi phones
‚ñ° Various screen sizes

C. Beta Testing
---------------
TestFlight (iOS):
1. Upload build to App Store Connect
2. Add beta testers
3. Collect feedback

Google Play Console (Android):
1. Create internal testing track
2. Add testers via email
3. Promote to closed/open testing

üöÄ 12. DEPLOYMENT CHECKLIST
============================

Pre-Deployment:
‚ñ° Update app version numbers
‚ñ° Remove debug logs
‚ñ° Enable production mode
‚ñ° Test on physical devices
‚ñ° Verify all API endpoints
‚ñ° Check push notifications
‚ñ° Validate in-app purchases
‚ñ° Review app store metadata
‚ñ° Prepare release notes

iOS Deployment:
‚ñ° Archive and upload to App Store Connect
‚ñ° Submit for App Store Review
‚ñ° Respond to review feedback if needed
‚ñ° Release to App Store

Android Deployment:
‚ñ° Generate signed AAB
‚ñ° Upload to Google Play Console
‚ñ° Set rollout percentage (start with 10%)
‚ñ° Monitor crash reports
‚ñ° Gradually increase rollout

Post-Deployment:
‚ñ° Monitor user feedback
‚ñ° Watch analytics dashboards
‚ñ° Check error rates
‚ñ° Update documentation
‚ñ° Plan next iteration

üìà 13. POST-LAUNCH MONITORING
=============================

A. Key Metrics to Track
-----------------------
User Metrics:
- Daily/Monthly Active Users
- User retention rates
- Session duration
- User engagement

Business Metrics:
- Conversion rates
- Revenue per user
- Cost per acquisition
- Lifetime value

Technical Metrics:
- App crash rates
- API response times
- Error rates
- Performance metrics

B. Monitoring Tools
-------------------
App Store Connect:
- Sales and trends
- App analytics
- Crash reports
- User reviews

Google Play Console:
- User acquisition
- User behavior
- Technical performance
- Store listing experiments

Firebase Analytics:
- Real-time users
- Event tracking
- Conversion funnels
- Audience insights

C. Maintenance Schedule
-----------------------
Daily:
‚ñ° Check error logs
‚ñ° Monitor user feedback
‚ñ° Review crash reports

Weekly:
‚ñ° Analyze user metrics
‚ñ° Update price data
‚ñ° Check API status
‚ñ° Review performance

Monthly:
‚ñ° Plan feature updates
‚ñ° Analyze competitors
‚ñ° Review financial metrics
‚ñ° Update content

üîÑ 14. CONTINUOUS IMPROVEMENT
=============================

A. Feature Updates
------------------
- Plan monthly feature releases
- A/B test new features
- Gather user feedback
- Iterate based on data

B. Performance Optimization
---------------------------
- Monitor app performance
- Optimize images and assets
- Improve loading times
- Reduce memory usage

C. User Experience
------------------
- Regular UX audits
- User research sessions
- Accessibility improvements
- Localization updates

üìû SUPPORT & RESOURCES
======================

Official Documentation:
- Expo: docs.expo.dev
- React Native: reactnative.dev
- Firebase: firebase.google.com/docs

Community:
- Expo Discord
- React Native Community
- Stack Overflow
- GitHub Issues

Support Contacts:
- Technical Support: tech@pricetrackerpro.com
- Business Inquiries: business@pricetrackerpro.com
- Bug Reports: bugs@pricetrackerpro.com

üèÅ FINAL CHECKLIST
==================

Before Going Live:
‚ñ° All environment variables configured
‚ñ° Push notifications tested
‚ñ° Payment systems verified
‚ñ° Privacy policy published
‚ñ° Terms of service updated
‚ñ° Support documentation ready
‚ñ° Marketing materials prepared
‚ñ° App store assets uploaded
‚ñ° Beta testing completed
‚ñ° Performance testing passed
‚ñ° Security audit completed
‚ñ° Backup systems in place
‚ñ° Monitoring systems active
‚ñ° Team training completed

Congratulations! Your PriceTracker Pro app is ready for production! üéâ

Remember to keep this guide updated as you make changes to your app and infrastructure.

Last Updated: January 2024
Version: 1.0.0